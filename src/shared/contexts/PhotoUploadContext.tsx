"use client";
import React, {
  createContext,
  useContext,
  useState,
  useEffect,
  ReactNode,
} from "react";
import { PhotoConfig } from "@/widgets/upload-photo/UploadPhoto";
import { UploadPhotoClient as UploadPhoto } from "@/widgets/upload-photo/UploadPhotoClient";
import { rentApi } from "@/shared/api/routes/rent";
import { mechanicApi } from "@/shared/api/routes/mechanic";
import { useResponseModal } from "@/shared/ui/modal/ResponseModalContext";
import { useRouter } from "next/navigation";
import { useUserStore } from "../stores/userStore";
import { useModal } from "../ui/modal";

// ‚ÑπÔ∏è Removed localStorage constants - now relying on server-side photo upload flags
// All photo upload status is tracked via API response fields:
// - photo_before_selfie_uploaded
// - photo_before_car_uploaded
// - photo_before_interior_uploaded
// - photo_after_selfie_uploaded
// - photo_after_car_uploaded
// - photo_after_interior_uploaded

interface PhotoUploadContextType {
  isUserUploadRequired: boolean;
  isOwnerUploadRequired: boolean;
  isServiceUploadRequired: boolean;
  isDeliveryUploadRequired: boolean;
  isUserUploadStep2Required: boolean;
  isOwnerUploadStep2Required: boolean;
  isServiceUploadStep2Required: boolean;
  setUploadCompleted: () => void;
  setUploadRequired: (required: boolean) => void;
  showUserUploadModal: () => void;
  showOwnerUploadModal: () => void;
  showServiceUploadModal: () => void;
  showDeliveryUploadModal: () => void;
  showUserUploadModalStep2: () => void;
  showOwnerUploadModalStep2: () => void;
  showServiceUploadModalStep2: () => void;
  isInitialized: boolean;
}

const PhotoUploadMgrContext = createContext<PhotoUploadContextType | undefined>(
  undefined
);

interface PhotoUploadProviderProps {
  children: ReactNode;
}

export const PhotoUploadProvider = ({
  children,
}: PhotoUploadProviderProps) => {
  const [isUserUploadRequired, setIsUserUploadRequired] = useState(false);
  const [isOwnerUploadRequired, setIsOwnerUploadRequired] = useState(false);
  const [isServiceUploadRequired, setIsServiceUploadRequired] = useState(false);
  const [isDeliveryUploadRequired, setIsDeliveryUploadRequired] =
    useState(false);
  const [isUserUploadStep2Required, setIsUserUploadStep2Required] = useState(false);
  const [isOwnerUploadStep2Required, setIsOwnerUploadStep2Required] = useState(false);
  const [isServiceUploadStep2Required, setIsServiceUploadStep2Required] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [isInitialized, setIsInitialized] = useState(true); // Always initialized, no localStorage check needed
  const { hideModal } = useModal();
  const { showModal } = useResponseModal();
  const { refreshUser } = useUserStore();
  const router = useRouter();

  // ‚úÖ Removed useEffect with localStorage checks
  // Photo upload status is now managed purely through component state and server responses

  const setUploadCompleted = () => {
    // ‚úÖ Removed localStorage.setItem - state management only
    console.log('üì∏ [PHOTO_UPLOAD] Setting all uploads as completed');
    setIsUserUploadRequired(false);
    setIsOwnerUploadRequired(false);
    setIsServiceUploadRequired(false);
    setIsDeliveryUploadRequired(false);
  };

  const setUploadRequired = (required: boolean) => {
    // ‚úÖ Removed localStorage.setItem - state management only
    // This is simplified - caller should set specific upload requirement
    console.log(`üì∏ [PHOTO_UPLOAD] Setting upload required: ${required}`);
    setIsUserUploadRequired(required);
    setIsOwnerUploadRequired(required);
    setIsServiceUploadRequired(required);
    setIsDeliveryUploadRequired(required);
  };

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –ø–æ–∫–∞–∑–∞ –º–æ–¥–∞–ª–æ–∫
  const showUserUploadModal = () => {
    // ‚úÖ Removed localStorage check - rely on server-side flags instead
    setIsUserUploadRequired(true);
  };

  const showOwnerUploadModal = () => {
    // ‚úÖ Removed localStorage check - rely on server-side flags instead
    setIsOwnerUploadRequired(true);
  };

  const showServiceUploadModal = () => {
    // ‚úÖ Removed localStorage check - rely on server-side flags instead
    setIsServiceUploadRequired(true);
  };

  const showDeliveryUploadModal = () => {
    // ‚úÖ Removed localStorage check - rely on server-side flags instead
    setIsDeliveryUploadRequired(true);
  };

  const showUserUploadModalStep2 = () => {
    setIsUserUploadStep2Required(true);
  };

  const showOwnerUploadModalStep2 = () => {
    setIsOwnerUploadStep2Required(true);
  };

  const handleUserPhotoUpload = async (files: { [key: string]: File[] }) => {
    setIsLoading(true);
    const formData = new FormData();
    for (const key in files) {
      for (const file of files[key]) {
        formData.append(key, file);
      }
    }
    try {
      const res = await rentApi.uploadBeforeRent(formData);
      if (res.status === 200) {
        setIsLoading(false);
        // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ–ª—Ñ–∏ + –∫—É–∑–æ–≤–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ç–æ—Ä–æ–π —ç—Ç–∞–ø
        setIsUserUploadStep2Required(true);
        showModal({
          type: "success",
          description: "–ó–∞–º–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –æ—Ç–∫—Ä—ã—Ç—ã! –¢–µ–ø–µ—Ä—å —Å—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ —Å–∞–ª–æ–Ω.",
          buttonText: "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å",
          onClose: () => {
            hideModal();
          },
        });
      }
    } catch (error) {
      console.log(error);
      setIsLoading(false);
      showModal({
        type: "error",
        description: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π",
        buttonText: "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞",
      });
    }
  };

  const handleUserPhotoUploadStep2 = async (files: { [key: string]: File[] }) => {
    setIsLoading(true);
    const formData = new FormData();
    for (const key in files) {
      for (const file of files[key]) {
        formData.append(key, file);
      }
    }
    try {
      const res = await rentApi.uploadBeforeRentInterior(formData);
      if (res.status === 200) {
        setIsLoading(false);
        setIsUserUploadStep2Required(false);
        setUploadCompleted(); // ‚úÖ Removed uploadType parameter
        showModal({
          type: "success",
          description: "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã! –î–≤–∏–≥–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.",
          buttonText: "–û—Ç–ª–∏—á–Ω–æ",
          onClose: () => {
            router.refresh();
            refreshUser();
            hideModal();
          },
        });
      }
    } catch (error) {
      console.log(error);
      setIsLoading(false);
      showModal({
        type: "error",
        description: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π",
        buttonText: "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞",
      });
    }
  };

  const handleOwnerPhotoUpload = async (files: { [key: string]: File[] }) => {
    setIsLoading(true);
    const formData = new FormData();
    for (const key in files) {
      for (const file of files[key]) {
        formData.append(key, file);
      }
    }
    try {
      const res = await rentApi.uploadOwnerBeforeRent(formData);
      if (res.status === 200) {
        setIsLoading(false);
        // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –∫—É–∑–æ–≤–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ç–æ—Ä–æ–π —ç—Ç–∞–ø
        setIsOwnerUploadStep2Required(true);
        showModal({
          type: "success",
          description: "–ó–∞–º–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –æ—Ç–∫—Ä—ã—Ç—ã! –¢–µ–ø–µ—Ä—å —Å—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ —Å–∞–ª–æ–Ω.",
          buttonText: "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å",
          onClose: () => {
            hideModal();
          },
        });
      }
    } catch (error) {
      console.log(error);
      setIsLoading(false);
      showModal({
        type: "error",
        description: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π",
        buttonText: "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞",
      });
    }
  };

  const handleOwnerPhotoUploadStep2 = async (files: { [key: string]: File[] }) => {
    setIsLoading(true);
    const formData = new FormData();
    for (const key in files) {
      for (const file of files[key]) {
        formData.append(key, file);
      }
    }
    try {
      const res = await rentApi.uploadOwnerBeforeRentInterior(formData);
      if (res.status === 200) {
        setIsLoading(false);
        setIsOwnerUploadStep2Required(false);
        setUploadCompleted(); // ‚úÖ Removed uploadType parameter
        showModal({
          type: "success",
          description: "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã! –î–≤–∏–≥–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.",
          buttonText: "–û—Ç–ª–∏—á–Ω–æ",
          onClose: () => {
            router.refresh();
            refreshUser();
            hideModal();
          },
        });
      }
    } catch (error) {
      console.log(error);
      setIsLoading(false);
      showModal({
        type: "error",
        description: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π",
        buttonText: "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞",
      });
    }
  };

  const handleServicePhotoUpload = async (files: { [key: string]: File[] }) => {
    setIsLoading(true);
    const formData = new FormData();
    for (const key in files) {
      for (const file of files[key]) {
        formData.append(key, file);
      }
    }
    try {
      const res = await mechanicApi.uploadBeforeCheckCar(formData);
      if (res.status === 200) {
        setIsLoading(false);
        // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –∫—É–∑–æ–≤–∞ –∏ —Å–µ–ª—Ñ–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ç–æ—Ä–æ–π —ç—Ç–∞–ø
        setIsServiceUploadRequired(false);
        setIsServiceUploadStep2Required(true);
        showModal({
          type: "success",
          description: "–ó–∞–º–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –æ—Ç–∫—Ä—ã—Ç—ã! –¢–µ–ø–µ—Ä—å —Å—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ —Å–∞–ª–æ–Ω.",
          buttonText: "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å",
          onClose: () => {
            hideModal();
          },
        });
      }
    } catch (error) {
      console.log(error);
      setIsLoading(false);
      showModal({
        type: "error",
        description: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Å–µ—Ä–≤–∏—Å–∞",
        buttonText: "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞",
      });
    }
  };

  const handleServicePhotoUploadStep2 = async (files: { [key: string]: File[] }) => {
    setIsLoading(true);
    const formData = new FormData();
    for (const key in files) {
      for (const file of files[key]) {
        formData.append(key, file);
      }
    }
    try {
      const res = await mechanicApi.uploadBeforeCheckCarInterior(formData);
      if (res.status === 200) {
        setIsLoading(false);
        setIsServiceUploadStep2Required(false);
        setUploadCompleted(); // ‚úÖ Removed uploadType parameter
        showModal({
          type: "success",
          description: "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã! –î–≤–∏–≥–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.",
          buttonText: "–û—Ç–ª–∏—á–Ω–æ",
          onClose: () => {
            router.refresh();
            refreshUser();
            hideModal();
          },
        });
      }
    } catch (error) {
      console.log(error);
      setIsLoading(false);
      showModal({
        type: "error",
        description: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Å–∞–ª–æ–Ω–∞",
        buttonText: "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞",
      });
    }
  };

  const handleDeliveryPhotoUpload = async (files: {
    [key: string]: File[];
  }) => {
    setIsLoading(true);
    const formData = new FormData();
    for (const key in files) {
      for (const file of files[key]) {
        formData.append(key, file);
      }
    }
    try {
      const res = await mechanicApi.uploadBeforeDelivery(formData);
      if (res.status === 200) {
        setIsLoading(false);
        setUploadCompleted(); // ‚úÖ Removed uploadType parameter
        showModal({
          type: "success",
          description: "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã",
          buttonText: "–û—Ç–ª–∏—á–Ω–æ",
          onClose: () => {
            router.refresh();
            refreshUser();
            hideModal();
          },
        });
      }
    } catch (error) {
      console.log(error);
      setIsLoading(false);
      showModal({
        type: "error",
        description: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–æ—Å—Ç–∞–≤–∫–∏",
        buttonText: "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞",
      });
    }
  };

  const showServiceUploadModalStep2 = () => {
    setIsServiceUploadStep2Required(true);
  };

  const contextValue: PhotoUploadContextType = {
    isUserUploadRequired,
    isOwnerUploadRequired,
    isServiceUploadRequired,
    isDeliveryUploadRequired,
    isUserUploadStep2Required,
    isOwnerUploadStep2Required,
    isServiceUploadStep2Required,
    setUploadCompleted,
    setUploadRequired,
    showUserUploadModal,
    showOwnerUploadModal,
    showServiceUploadModal,
    showDeliveryUploadModal,
    showServiceUploadModalStep2,
    showUserUploadModalStep2,
    showOwnerUploadModalStep2,
    isInitialized,
  };

  return (
    <PhotoUploadMgrContext.Provider value={contextValue}>
      {children}

      {/* User Upload Modal Step 1 */}
      {isUserUploadRequired && (
        <UploadPhoto
          config={userConfigStep1}
          onPhotoUpload={handleUserPhotoUpload}
          isOpen={true}
          onClose={undefined}
          isLoading={isLoading}
          isCloseable={false}
        />
      )}

      {/* User Upload Modal Step 2 */}
      {isUserUploadStep2Required && (
        <UploadPhoto
          config={userConfigStep2}
          onPhotoUpload={handleUserPhotoUploadStep2}
          isOpen={true}
          onClose={undefined}
          isLoading={isLoading}
          isCloseable={false}
        />
      )}

      {/* Owner Upload Modal Step 1 */}
      {isOwnerUploadRequired && (
        <UploadPhoto
          config={ownerConfigStep1}
          onPhotoUpload={handleOwnerPhotoUpload}
          isOpen={true}
          onClose={undefined}
          isLoading={isLoading}
          isCloseable={false}
        />
      )}

      {/* Owner Upload Modal Step 2 */}
      {isOwnerUploadStep2Required && (
        <UploadPhoto
          config={ownerConfigStep2}
          onPhotoUpload={handleOwnerPhotoUploadStep2}
          isOpen={true}
          onClose={undefined}
          isLoading={isLoading}
          isCloseable={false}
        />
      )}

      {/* Service Upload Modal Step 1 */}
      {isServiceUploadRequired && (
        <UploadPhoto
          config={baseConfigStep1}
          onPhotoUpload={handleServicePhotoUpload}
          isOpen={true}
          onClose={() => setUploadRequired(false)}
          isLoading={isLoading}
          isCloseable={false}
        />
      )}

      {/* Service Upload Modal Step 2 */}
      {isServiceUploadStep2Required && (
        <UploadPhoto
          config={baseConfigStep2}
          onPhotoUpload={handleServicePhotoUploadStep2}
          isOpen={true}
          onClose={undefined}
          isLoading={isLoading}
          isCloseable={false}
        />
      )}

      {/* Delivery Upload Modal */}
      {isDeliveryUploadRequired && (
        <UploadPhoto
          config={baseConfig}
          onPhotoUpload={handleDeliveryPhotoUpload}
          isOpen={true}
          onClose={() => setUploadRequired(false)}
          isLoading={isLoading}
          isCloseable={false}
        />
      )}
    </PhotoUploadMgrContext.Provider>
  );
};

export const usePhotoUpload = (): PhotoUploadContextType => {
  const context = useContext(PhotoUploadMgrContext);
  if (!context) {
    throw new Error("usePhotoUpload must be used within a PhotoUploadProvider");
  }
  return context;
};

// Legacy exports for backward compatibility
export const baseConfig: PhotoConfig[] = [
  {
    id: "selfie",
    title: "–°–¥–µ–ª–∞–π—Ç–µ —Å–µ–ª—Ñ–∏.",
    cameraType: "front",
    multiple: { min: 1, max: 1 },
  },
  {
    id: "car_photos",
    title: "–°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ –º–∞—à–∏–Ω—ã —Å–æ –≤—Å–µ—Ö —Å—Ç–æ—Ä–æ–Ω.",
    multiple: { min: 1, max: 1 },
    cameraType: "back",
  },
  {
    id: "interior_photos",
    title: "–°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ —Å–∞–ª–æ–Ω–∞.",
    multiple: { min: 1, max: 5 },
    cameraType: "back",
  },
];

// –ù–æ–≤—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –¥–≤—É—Ö—ç—Ç–∞–ø–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
export const baseConfigStep1: PhotoConfig[] = [
  {
    id: "selfie",
    title: "–°–¥–µ–ª–∞–π—Ç–µ —Å–µ–ª—Ñ–∏ —Å –º–∞—à–∏–Ω–æ–π.",
    cameraType: "front",
    multiple: { min: 1, max: 1 },
  },
  {
    id: "car_photos",
    title: "–°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ –º–∞—à–∏–Ω—ã —Å–æ –≤—Å–µ—Ö —Å—Ç–æ—Ä–æ–Ω.",
    multiple: { min: 1, max: 1 },
    cameraType: "back",
  },
];

export const baseConfigStep2: PhotoConfig[] = [
  {
    id: "interior_photos",
    title: "–°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ —Å–∞–ª–æ–Ω–∞.",
    multiple: { min: 1, max: 5 },
    cameraType: "back",
  },
];

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Ñ–æ—Ç–æ –ü–û–°–õ–ï –æ—Å–º–æ—Ç—Ä–∞ –º–µ—Ö–∞–Ω–∏–∫–æ–º
export const mechanicAfterConfigStep1: PhotoConfig[] = [
  {
    id: "selfie",
    title: "–°–¥–µ–ª–∞–π—Ç–µ —Å–µ–ª—Ñ–∏.",
    cameraType: "front",
    multiple: { min: 1, max: 1 },
  },
  {
    id: "interior_photos",
    title: "–°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ —Å–∞–ª–æ–Ω–∞.",
    multiple: { min: 1, max: 5 },
    cameraType: "back",
  },
];

export const mechanicAfterConfigStep2: PhotoConfig[] = [
  {
    id: "car_photos",
    title: "–°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ –º–∞—à–∏–Ω—ã —Å–æ –≤—Å–µ—Ö —Å—Ç–æ—Ä–æ–Ω.",
    multiple: { min: 1, max: 1 },
    cameraType: "back",
  },
];

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Å–µ–ª—Ñ–∏ + –∫—É–∑–æ–≤)
export const userConfigStep1: PhotoConfig[] = [
  {
    id: "selfie",
    title: "–°–¥–µ–ª–∞–π—Ç–µ —Å–µ–ª—Ñ–∏ —Å –º–∞—à–∏–Ω–æ–π.",
    cameraType: "front",
    multiple: { min: 1, max: 1 },
  },
  {
    id: "car_photos",
    title: "–°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ –º–∞—à–∏–Ω—ã —Å–æ –≤—Å–µ—Ö —Å—Ç–æ—Ä–æ–Ω.",
    multiple: { min: 1, max: 1 },
    cameraType: "back",
  },
];

export const userConfigStep2: PhotoConfig[] = [
  {
    id: "interior_photos",
    title: "–°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ —Å–∞–ª–æ–Ω–∞.",
    multiple: { min: 1, max: 5 },
    cameraType: "back",
  },
];

export const ownerConfig: PhotoConfig[] = baseConfig.slice(1);

export const ownerConfigStep1: PhotoConfig[] = [
  {
    id: "car_photos",
    title: "–°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ –º–∞—à–∏–Ω—ã —Å–æ –≤—Å–µ—Ö —Å—Ç–æ—Ä–æ–Ω.",
    multiple: { min: 1, max: 1 },
    cameraType: "back",
  },
];

export const ownerConfigStep2: PhotoConfig[] = [
  {
    id: "interior_photos",
    title: "–°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ —Å–∞–ª–æ–Ω–∞.",
    multiple: { min: 1, max: 5 },
    cameraType: "back",
  },
];

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞—Ä–µ–Ω–¥—ã (–ü–û–°–õ–ï)
export const afterRentConfigStep1: PhotoConfig[] = [
  {
    id: "selfie",
    title: "–°–¥–µ–ª–∞–π—Ç–µ —Å–µ–ª—Ñ–∏.",
    cameraType: "front",
    multiple: { min: 1, max: 1 },
  },
  {
    id: "interior_photos",
    title: "–°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ —Å–∞–ª–æ–Ω–∞.",
    multiple: { min: 1, max: 5 },
    cameraType: "back",
  },
];

export const afterRentConfigStep2: PhotoConfig[] = [
  {
    id: "car_photos",
    title: "–°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ –º–∞—à–∏–Ω—ã —Å–æ –≤—Å–µ—Ö —Å—Ç–æ—Ä–æ–Ω.",
    multiple: { min: 1, max: 1 },
    cameraType: "back",
  },
];

// –î–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø–æ—Å–ª–µ –∞—Ä–µ–Ω–¥—ã (–±–µ–∑ —Å–µ–ª—Ñ–∏)
export const ownerAfterRentConfigStep1: PhotoConfig[] = [
  {
    id: "interior_photos",
    title: "–°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ —Å–∞–ª–æ–Ω–∞.",
    multiple: { min: 1, max: 5 },
    cameraType: "back",
  },
];

export const ownerAfterRentConfigStep2: PhotoConfig[] = [
  {
    id: "car_photos",
    title: "–°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ –º–∞—à–∏–Ω—ã —Å–æ –≤—Å–µ—Ö —Å—Ç–æ—Ä–æ–Ω.",
    multiple: { min: 1, max: 1 },
    cameraType: "back",
  },
];
