interface ReactNativeCameraResult {
  success: boolean;
  data?: string | string[];
  type?: "single" | "multiple";
  count?: number;
  error?: string;
}

declare global {
  interface Window {
    ReactNativeWebView?: {
      postMessage: (message: string) => void;
    };
    reactNativeCameraResult?: (result: ReactNativeCameraResult) => void;
  }
}

export class FlutterCamera {
  private static resultCallback:
    | ((result: ReactNativeCameraResult) => void)
    | null = null;

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ React Native –∫–∞–º–µ—Ä–∞
   */
  static isAvailable(): boolean {
    return typeof window !== "undefined" && !!window.ReactNativeWebView;
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ React Native
   */
  private static sendMessage(action: string, data?: unknown): boolean {
    try {
      if (typeof window !== "undefined" && window.ReactNativeWebView) {
        const message = JSON.stringify({ action, data });
        window.ReactNativeWebView.postMessage(message);
        return true;
      }
      return false;
    } catch (e) {
      console.error(`Error sending message ${action}:`, e);
      return false;
    }
  }

  /**
   * –°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ —Å –∫–∞–º–µ—Ä—ã
   */
  static async capturePhoto(
    cameraType: "front" | "back" = "back"
  ): Promise<string | null> {
    if (!this.isAvailable()) {
      throw new Error("React Native camera is not available");
    }

    return new Promise((resolve, reject) => {
      this.resultCallback = (result: ReactNativeCameraResult) => {
        if (result.success && typeof result.data === "string") {
          resolve(result.data);
        } else {
          reject(new Error(result.error || "Failed to capture photo"));
        }
        this.resultCallback = null;
      };

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π callback
      window.reactNativeCameraResult = this.resultCallback;
      console.log("üì± Callback —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:", !!window.reactNativeCameraResult);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ React Native
      if (this.sendMessage("capturePhoto", cameraType)) {
        console.log("üì± –û—Ç–ø—Ä–∞–≤–ª—è–µ–º capturePhoto –≤ React Native");
      } else {
        reject(new Error("Failed to send message to React Native"));
        return;
      }

      // –¢–∞–π–º–∞—É—Ç –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –ø—Ä–∏–¥–µ—Ç
      setTimeout(() => {
        if (this.resultCallback) {
          reject(new Error("Camera capture timeout (30s)"));
          this.resultCallback = null;
        }
      }, 10000); // –£–º–µ–Ω—å—à–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–æ 10 —Å–µ–∫—É–Ω–¥
    });
  }

  /**
   * –í—ã–±—Ä–∞—Ç—å –æ–¥–Ω–æ —Ñ–æ—Ç–æ –∏–∑ –≥–∞–ª–µ—Ä–µ–∏
   */
  static async pickSinglePhoto(): Promise<string | null> {
    if (!this.isAvailable()) {
      throw new Error("React Native camera is not available");
    }

    return new Promise((resolve, reject) => {
      this.resultCallback = (result: ReactNativeCameraResult) => {
        if (result.success && typeof result.data === "string") {
          resolve(result.data);
        } else {
          reject(new Error(result.error || "Failed to pick photo"));
        }
        this.resultCallback = null;
      };

      window.reactNativeCameraResult = this.resultCallback;

      if (this.sendMessage("pickSinglePhoto")) {
        console.log("üì± –û—Ç–ø—Ä–∞–≤–ª—è–µ–º pickSinglePhoto –≤ React Native");
      } else {
        reject(new Error("Failed to send message to React Native"));
        return;
      }

      setTimeout(() => {
        if (this.resultCallback) {
          reject(new Error("Photo picker timeout (10s)"));
          this.resultCallback = null;
        }
      }, 10000); // –£–º–µ–Ω—å—à–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–æ 10 —Å–µ–∫—É–Ω–¥
    });
  }

  /**
   * –í—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ –∏–∑ –≥–∞–ª–µ—Ä–µ–∏
   */
  static async pickMultiplePhotos(maxImages: number = 10): Promise<string[]> {
    if (!this.isAvailable()) {
      throw new Error("React Native camera is not available");
    }

    return new Promise((resolve, reject) => {
      this.resultCallback = (result: ReactNativeCameraResult) => {
        if (result.success && Array.isArray(result.data)) {
          resolve(result.data);
        } else {
          reject(new Error(result.error || "Failed to pick photos"));
        }
        this.resultCallback = null;
      };

      window.reactNativeCameraResult = this.resultCallback;

      if (this.sendMessage("pickMultiplePhotos", { maxImages })) {
        console.log("üì± –û—Ç–ø—Ä–∞–≤–ª—è–µ–º pickMultiplePhotos –≤ React Native");
      } else {
        reject(new Error("Failed to send message to React Native"));
        return;
      }

      setTimeout(() => {
        if (this.resultCallback) {
          reject(new Error("Multiple photo picker timeout (10s)"));
          this.resultCallback = null;
        }
      }, 10000); // –£–º–µ–Ω—å—à–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–æ 10 —Å–µ–∫—É–Ω–¥
    });
  }

  /**
   * –°–¥–µ–ª–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ —Å –∫–∞–º–µ—Ä—ã –ø–æ–¥—Ä—è–¥
   */
  static async captureMultiplePhotos(
    minPhotos: number = 1,
    maxPhotos: number = 10,
    cameraType: "front" | "back" = "back",
    stencil?: any,
    photoTitle?: string
  ): Promise<string[]> {
    if (!this.isAvailable()) {
      throw new Error("React Native camera is not available");
    }

    return new Promise((resolve, reject) => {
      this.resultCallback = (result: ReactNativeCameraResult) => {
        if (result.success && Array.isArray(result.data)) {
          resolve(result.data);
        } else {
          reject(
            new Error(result.error || "Failed to capture multiple photos")
          );
        }
        this.resultCallback = null;
      };

      window.reactNativeCameraResult = this.resultCallback;

      if (
        this.sendMessage("captureMultiplePhotos", {
          minPhotos,
          maxPhotos,
          cameraType,
          stencil,
          photoTitle,
        })
      ) {
        console.log("üì± –û—Ç–ø—Ä–∞–≤–ª—è–µ–º captureMultiplePhotos –≤ React Native", {
          minPhotos,
          maxPhotos,
          cameraType,
          stencil,
          photoTitle,
        });
      } else {
        reject(new Error("Failed to send message to React Native"));
        return;
      }

      setTimeout(() => {
        if (this.resultCallback) {
          reject(new Error("Multiple photo capture timeout (20s)"));
          this.resultCallback = null;
        }
      }, 20000); // –£–º–µ–Ω—å—à–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–æ 20 —Å–µ–∫—É–Ω–¥ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π —Å—ä–µ–º–∫–∏
    });
  }

  /**
   * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç base64 —Å—Ç—Ä–æ–∫—É –≤ File –æ–±—ä–µ–∫—Ç
   */
  static base64ToFile(
    base64String: string,
    filename: string = "photo.jpg"
  ): File {
    const arr = base64String.split(",");
    const mime = arr[0].match(/:(.*?);/)?.[1] || "image/jpeg";
    const bstr = atob(arr[1]);
    let n = bstr.length;
    const u8arr = new Uint8Array(n);

    while (n--) {
      u8arr[n] = bstr.charCodeAt(n);
    }

    return new File([u8arr], filename, { type: mime });
  }

  /**
   * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –º–∞—Å—Å–∏–≤ base64 —Å—Ç—Ä–æ–∫ –≤ –º–∞—Å—Å–∏–≤ File –æ–±—ä–µ–∫—Ç–æ–≤
   */
  static base64ArrayToFiles(
    base64Array: string[],
    filenamePrefix: string = "photo"
  ): File[] {
    return base64Array.map((base64, index) =>
      this.base64ToFile(base64, `${filenamePrefix}_${index + 1}.jpg`)
    );
  }
}
